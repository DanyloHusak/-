Програмний додаток: Unreal Engine 5 (це додаток для програмування на с++ та розробці відеоігр)


Unit Testing:

Вимога: Перевірка окремих класів, функцій гри або двигуна на коректність їх роботи.
Unit testing: Використати фреймворки для тестування, такі як Unreal Engine Testing Framework або сторонні бібліотеки, для написання тестів для окремих функцій, компонентів гри та систем. Можна перевірити чи гра виконує відповідні дії при натисканні на клавіші.


Component Testing:

Вимога: Перевірка окремих компонентів гри або двигуна на коректність їх роботи.
Component testing: Використати фреймворки для тестування, щоб написати тести для окремих компонентів гри та перевірити їхню роботу в ізоляції від інших частин гри. Необхідно створити окремий рівень для тестування який призначений тільки розробника і перевірити чи всі функції виконують правильно. Потім перевірити UI користувача для зручності використання та доступності. І в кінці провести тестування завантаження рівня та всіх його компонентів для забезпечення продуктивності


Smoke Testing:

Вимога: Перевірка базового функціоналу гри без глибоких перевірок.
Smoke testing: Запустити гру та переконайтеся, що основні функції, такі як завантаження головного меню гри або можливість руху персонажа працюють без проблем. Немає необхідності перевіряти всі функції оскільки якщо наприклад гравець не може відкрити меню, то ця версія гри є не робочою.


Integration Testing:

Вимога: Перевірка взаємодії між різними модулями або компонентами гри.
Integration testing: Створити декілька модулів для запуску гри без яких вона не зможе працювати. Модуль 1 - буде запускати рівень і всі об'єкти на ньому
Модуль 2 - буде генерувати і перевіряти справність гравця який буде з'являтися на рівні
Модуль 3 - буде перевіряти справність фізики гри
Під час запуску гри, програма буде покрокови іти від першого до третього модуля і запускати необхідні функції


Regression Testing:

Вимога: Перевірка, що нові зміни в грі не порушують раніше працюючий функціонал.
Regression testing: Виконати тестування попередньої функціональності гри після внесення змін, щоб переконатися, що вони не вплинули на роботу інших частин гри. Для перевірки розробник запускає, наприклад, другу версію гри і додає нову функцію, після чого запускається рівень і перевіряється чи нова функція не конфліктує з іншими частинами гри.


Sanity Testing:

Вимога: Перевірка основного функціоналу гри після внесення невеликих змін або оновлення.
Sanity testing: Створити 2 різні версії гри з різними функціями. Після цього потрібно провести smoke testing до другої версії і перевірити чи всі основні функції працюють правильно. Якщо вона пройшла smoke test отже і перша версія його теж виконуватиме успішно.


System Testing:

Вимога: Незалежна перевірка гри як цілісної системи.
System testing: Необхідно відібрати тестерів які не брали участь в розробці гри і щоб вони перевірили основні функції гри на справність та баги.


User Acceptance Testing:

Вимога: Перевірка, що гра відповідає вимогам та очікуванням користувачів.
Acceptance testing: Потрібно дати звичайним користувачам пограти в гру для перевірки гри на відповідність їхнім потребам та очікуванням. Якщо користувачам в грі не сподобались деякі функції, змінити в ній їй.


API testing:

Вимога: Перевірка коректності роботи API, що використовуються грою.
API testing: Потрібно перевірити гру на надійність, продуктивність, безпеку та функціональність.
Крок 1 - Перед виконанням тестування, переглянути технічні характеристики API
Крок 2 - Визначити цільового клієнта щодо API, їхні функції, робочоий процес програми, результат який очікується та проблеми, для вирішення яких проводиться тестування API.
Крок 3 - Визначити введені параметри.
Крок 4 - Провести тести для перевірки основних функцій використовуючи ввдені параметри та тести для перевірки заборонених операцій 
Крок 5 - Використати Unreal Engine API testng tools для тестування


UI testing:

Вимога: Перевірка коректності відображення та взаємодії з користувацьким інтерфейсом гри та меню.
UI testing: Використати інструменти для тестування UI, щоб перевірити, чи відображаються елементи меню ректно та чи працюють вони правильно. Перевірити положення тексту, повідомлень та шрифт. Перевірити заголового сторінки, його розташування та вирівнювання. Перевірити чи прцюють кнопки та гіперпосилання.


White-box testing:

Вимога: Перевірка внутрішньої логіки та структури гри.
White-box testing: Перевірити чи всі основні функції, блюпринти або класи гри виконуються під час запуску рівня. Якщо є, то проаналізувати помилки в коді та виправити їх.


Black-box testing:

Вимога: Перевірка функціональності гри без знання її внутрішньої реалізації.
Black-box testing: Дати користувачу можливість самому перевірити справність гри під час її запуску. Користувачу необхідно ввійти в свій акаунт з правильним та неправильним паролем щоб програма видала помилку. Всі дії користувача відслідковувати та записувати для виправлення в майбутньому


Production testing:

Вимога: Перевірка функціональності та продуктивності гри в реальному середовищі.
Production testing: Якщо наприклад ми створили нове меню для програми, необхідно зробити його доступним лише для 20% користувачів і зібрати з них фідбек. Після виправлення і внесення змін, якщо ми впевенені в результаті, опублікувати нову версію для всіх користувачів в реальних умовах використання.


Alpha testing:

Вимога: Тестування гри в контрольованому середовищі перед випуском на ринок.
Alpha testing: Тестер перевіряє всі основні функції гри, потім розробляє план тестування який буде перевіряти основні частини програми. Далі всі перевірки виконуються і якщо в грі знаходиться баг, його відпраляють на виправлення. Пілся чого тест проводиться знову.


Beta testing:

Вимога: Тестування гри в реальному середовищі з великою кількістю користувачів.
Beta testing: Для бета тестування необхідно випустити нефінальну версію гри для звичайних користувачів і зібрати їхні враження та фідбек.
